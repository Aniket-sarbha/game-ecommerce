generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id              Int           @id @default(autoincrement())
  name            String        @unique
  isActive        Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  image           String?
  backgroundImage String?
  description     String?
  server          Boolean       @default(false)
  serverId        Boolean       @default(false)
  userId          Boolean       @default(false)
  orders          Order[]
  sellerOffers    SellerOffer[]
  storeItems      StoreItem[]
}

model StoreItem {
  id         Int         @id @default(autoincrement())
  productId  String      @unique
  name       String
  price      Decimal     @db.Decimal(10, 2)
  mrp        Decimal     @db.Decimal(10, 2)
  image      String?
  isActive   Boolean     @default(false)
  storeId    Int
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
  store      Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@index([storeId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          UserRole      @default(USER)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  orders        Order[]
  sellerOffers  SellerOffer[]
  sessions      Session[]
}

enum UserRole {
  USER
  ADMIN
  SUPERADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  storeId       Int
  totalAmount   Decimal     @db.Decimal(10, 2)
  status        String      @default("completed")
  paymentMethod String      @default("credit_card")
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  orderNumber   String      @unique @default(cuid())
  store         Store       @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]

  @@index([userId])
  @@index([storeId])
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  orderId     String
  storeItemId Int
  quantity    Int       @default(1)
  price       Decimal   @db.Decimal(10, 2)
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  storeItem   StoreItem @relation(fields: [storeItemId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([storeItemId])
}

model SellerOffer {
  id          String   @id @default(cuid())
  sellerId    String
  storeId     Int
  storeItemId Int?
  price       Decimal  @db.Decimal(10, 2)
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  currency    String   @default("INR")
  mrp         Decimal  @default(0) @db.Decimal(10, 2)
  seller      User     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  store       Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@unique([sellerId, storeId])
  @@index([sellerId])
  @@index([storeId])
  @@index([storeItemId])
}
